const { ethers } = require("hardhat");
require("dotenv").config();

async function main() {
    console.log("üöÄ ÂºÄÂßãÈÉ®ÁΩ≤ BONK Games ÊäΩÂ•ñÂêàÁ∫¶Âà∞ X Layer ‰∏ªÁΩë...");
    
    // Ëé∑ÂèñÈÉ®ÁΩ≤ËÄÖË¥¶Êà∑
    const [deployer] = await ethers.getSigners();
    console.log("üìù ÈÉ®ÁΩ≤ËÄÖÂú∞ÂùÄ:", deployer.address);
    console.log("üí∞ ÈÉ®ÁΩ≤ËÄÖ‰ΩôÈ¢ù:", ethers.formatEther(await deployer.provider.getBalance(deployer.address)), "OKB");
    
    // ÈÉ®ÁΩ≤ÈÖçÁΩÆ
    const config = {
        // ÂàùÂßã‰ª£Â∏ÅÂêàÁ∫¶Âú∞ÂùÄ (ÂèØ‰ª•ÊòØ‰ªªÊÑèERC20‰ª£Â∏ÅÔºåÂêéÁª≠ÂèØÊõ¥Êç¢)
        initialTokenContract: process.env.INITIAL_TOKEN_CONTRACT || "0x0000000000000000000000000000000000000000",
        minBet: process.env.MIN_BET_AMOUNT || ethers.parseEther("1"),
        maxBet: process.env.MAX_BET_AMOUNT || ethers.parseEther("1000"),
        houseFeePercentage: process.env.HOUSE_FEE_PERCENTAGE || 500, // 5%
        quickBetOptions: (process.env.QUICK_BET_OPTIONS || "1,5,10,50,100").split(",").map(x => ethers.parseEther(x.trim()))
    };
    
    console.log("\nüìã ÈÉ®ÁΩ≤ÈÖçÁΩÆ:");
    console.log("- ÂàùÂßã‰ª£Â∏ÅÂêàÁ∫¶:", config.initialTokenContract);
    console.log("- ÊúÄÂ∞è‰∏ãÊ≥®:", ethers.formatEther(config.minBet), "tokens");
    console.log("- ÊúÄÂ§ß‰∏ãÊ≥®:", ethers.formatEther(config.maxBet), "tokens");
    console.log("- Âπ≥Âè∞Ë¥πÁéá:", config.houseFeePercentage / 100, "%");
    console.log("- Âø´Êç∑‰∏ãÊ≥®ÈÄâÈ°π:", config.quickBetOptions.map(x => ethers.formatEther(x)).join(", "), "tokens");
    
    // Â¶ÇÊûúÊ≤°ÊúâËÆæÁΩÆ‰ª£Â∏ÅÂêàÁ∫¶Âú∞ÂùÄÔºåÊèêÁ§∫Áî®Êà∑
    if (config.initialTokenContract === "0x0000000000000000000000000000000000000000") {
        console.log("\n‚ö†Ô∏è  Ë≠¶Âëä: Êú™ËÆæÁΩÆÂàùÂßã‰ª£Â∏ÅÂêàÁ∫¶Âú∞ÂùÄ");
        console.log("   ÈÉ®ÁΩ≤ÂêéÈúÄË¶ÅÈÄöËøá updateTokenContract ÂáΩÊï∞ËÆæÁΩÆ‰ª£Â∏ÅÂêàÁ∫¶");
    }
    
    // ÈÉ®ÁΩ≤ÊäΩÂ•ñÂêàÁ∫¶
    console.log("\nüé∞ ÈÉ®ÁΩ≤ÊäΩÂ•ñÊ∏∏ÊàèÂêàÁ∫¶...");
    const LotteryGame = await ethers.getContractFactory("LotteryGame");
    const lotteryGame = await LotteryGame.deploy(
        config.initialTokenContract,
        deployer.address
    );
    
    await lotteryGame.waitForDeployment();
    const contractAddress = await lotteryGame.getAddress();
    console.log("‚úÖ ÊäΩÂ•ñÂêàÁ∫¶ÈÉ®ÁΩ≤ÊàêÂäü:", contractAddress);
    
    // ÈÖçÁΩÆÂêàÁ∫¶ÂèÇÊï∞
    console.log("\n‚öôÔ∏è ÈÖçÁΩÆÂêàÁ∫¶ÂèÇÊï∞...");
    
    // Êõ¥Êñ∞Ê∏∏ÊàèÈÖçÁΩÆ
    console.log("- Êõ¥Êñ∞Ê∏∏ÊàèÈÖçÁΩÆ...");
    await lotteryGame.updateGameConfig(
        config.minBet,
        config.maxBet,
        config.houseFeePercentage,
        true // ÊøÄÊ¥ªÊ∏∏Êàè
    );
    
    // Êõ¥Êñ∞Âø´Êç∑‰∏ãÊ≥®ÈÄâÈ°π
    console.log("- Êõ¥Êñ∞Âø´Êç∑‰∏ãÊ≥®ÈÄâÈ°π...");
    await lotteryGame.updateQuickBetOptions(config.quickBetOptions);
    
    // È™åËØÅÈÉ®ÁΩ≤
    console.log("\nüîç È™åËØÅÂêàÁ∫¶ÈÉ®ÁΩ≤...");
    const gameConfig = await lotteryGame.gameConfig();
    const quickBetOptions = await lotteryGame.getQuickBetOptions();
    const payoutRates = await lotteryGame.getAllPayoutRates();
    const currentToken = await lotteryGame.currentToken();
    
    console.log("- ÂΩìÂâç‰ª£Â∏ÅÂêàÁ∫¶:", currentToken);
    console.log("- ÊúÄÂ∞è‰∏ãÊ≥®:", ethers.formatEther(gameConfig[0]), "tokens");
    console.log("- ÊúÄÂ§ß‰∏ãÊ≥®:", ethers.formatEther(gameConfig[1]), "tokens");
    console.log("- Âπ≥Âè∞Ë¥πÁéá:", gameConfig[2].toString() / 100, "%");
    console.log("- Ê∏∏ÊàèÁä∂ÊÄÅ:", gameConfig[3] ? "ÊøÄÊ¥ª" : "ÊöÇÂÅú");
    console.log("- Âø´Êç∑‰∏ãÊ≥®ÈÄâÈ°π:", quickBetOptions.map(x => ethers.formatEther(x)).join(", "));
    console.log("- ËµîÁéáÈÖçÁΩÆ:");
    const symbolNames = ["Cherry", "Lemon", "Orange", "Plum", "Bell", "Bar", "Seven", "Jackpot"];
    payoutRates.forEach((rate, index) => {
        console.log(`  ${symbolNames[index]}: ${rate.toString() / 100}x`);
    });
    
    // ÊµãËØïÂü∫Êú¨ÂäüËÉΩ
    console.log("\nüß™ ÊµãËØïÂü∫Êú¨ÂäüËÉΩ...");
    
    // ÊµãËØïÁî®Êà∑Ê≥®ÂÜå
    console.log("- ÊµãËØïÁî®Êà∑Ê≥®ÂÜå...");
    await lotteryGame.registerUser("TestUser");
    const userInfo = await lotteryGame.users(deployer.address);
    console.log("  ‚úì Áî®Êà∑Ê≥®ÂÜåÊàêÂäü:", userInfo[1]); // nickname
    
    // ÊµãËØïÊ®°ÊãüÊäΩÂ•ñ
    console.log("- ÊµãËØïÊ®°ÊãüÊäΩÂ•ñ...");
    const simulationResult = await lotteryGame.simulateLottery(12345);
    console.log("  ‚úì Ê®°ÊãüÁªìÊûú:", simulationResult.map(s => symbolNames[Number(s)]));
    
    // ËæìÂá∫ÈÉ®ÁΩ≤ÊëòË¶Å
    console.log("\nüéâ ÈÉ®ÁΩ≤ÂÆåÊàê! ÂêàÁ∫¶‰ø°ÊÅØ:");
    console.log("=====================================");
    console.log("ÂêàÁ∫¶Âú∞ÂùÄ:", contractAddress);
    console.log("ÁΩëÁªú: X Layer ‰∏ªÁΩë");
    console.log("ÈìæID: 196");
    console.log("ÈÉ®ÁΩ≤ËÄÖ:", deployer.address);
    console.log("ÂΩìÂâç‰ª£Â∏Å:", currentToken);
    console.log("=====================================");
    
    // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
    const deploymentInfo = {
        network: {
            name: "X Layer Mainnet",
            chainId: 196,
            rpcUrl: "https://rpc.xlayer.tech",
            explorer: "https://www.oklink.com/xlayer"
        },
        deployer: deployer.address,
        timestamp: new Date().toISOString(),
        contract: {
            address: contractAddress,
            name: "LotteryGame",
            currentToken: currentToken,
            gameConfig: {
                minBet: ethers.formatEther(gameConfig[0]),
                maxBet: ethers.formatEther(gameConfig[1]),
                houseFeePercentage: gameConfig[2].toString(),
                isActive: gameConfig[3]
            },
            quickBetOptions: quickBetOptions.map(x => ethers.formatEther(x)),
            payoutRates: payoutRates.map((rate, index) => ({
                symbol: symbolNames[index],
                multiplier: rate.toString() / 100
            }))
        },
        features: [
            "‰ª£Â∏ÅÂàáÊç¢ÊîØÊåÅ",
            "Áî®Êà∑Ê≥®ÂÜåÁ≥ªÁªü",
            "ÊäΩÂ•ñÊ∏∏Êàè",
            "Â•ñÂä±Á¥ØËÆ°",
            "Âø´Êç∑‰∏ãÊ≥®",
            "ÁÆ°ÁêÜÂëòÂäüËÉΩ"
        ]
    };
    
    const fs = require('fs');
    const path = require('path');
    
    // Á°Æ‰øù deployments ÁõÆÂΩïÂ≠òÂú®
    const deploymentsDir = path.join(__dirname, '..', 'deployments');
    if (!fs.existsSync(deploymentsDir)) {
        fs.mkdirSync(deploymentsDir, { recursive: true });
    }
    
    // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
    const deploymentFile = path.join(deploymentsDir, `deployment-xlayer-mainnet.json`);
    fs.writeFileSync(deploymentFile, JSON.stringify(deploymentInfo, null, 2));
    console.log("üìÑ ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠òÂà∞:", deploymentFile);
    
    // ÁîüÊàêÂâçÁ´ØÈÖçÁΩÆ
    const frontendConfig = {
        contractAddress: contractAddress,
        chainId: 196,
        rpcUrl: "https://rpc.xlayer.tech",
        explorer: "https://www.oklink.com/xlayer",
        currentToken: currentToken,
        features: deploymentInfo.features,
        gameConfig: deploymentInfo.contract.gameConfig,
        quickBetOptions: deploymentInfo.contract.quickBetOptions,
        payoutRates: deploymentInfo.contract.payoutRates
    };
    
    const frontendConfigFile = path.join(deploymentsDir, 'frontend-config.json');
    fs.writeFileSync(frontendConfigFile, JSON.stringify(frontendConfig, null, 2));
    console.log("üìÑ ÂâçÁ´ØÈÖçÁΩÆÂ∑≤‰øùÂ≠òÂà∞:", frontendConfigFile);
    
    console.log("\n‚ú® ÊäΩÂ•ñÂêàÁ∫¶ÈÉ®ÁΩ≤ÂÆåÊàê!");
    console.log("üîó ËØ∑Âú®Âå∫ÂùóÊµèËßàÂô®‰∏≠È™åËØÅÂêàÁ∫¶: https://www.oklink.com/xlayer");
    console.log("üìñ ÂêàÁ∫¶ÂäüËÉΩ:");
    deploymentInfo.features.forEach(feature => {
        console.log(`   ‚Ä¢ ${feature}`);
    });
    
    console.log("\nüìù ‰∏ã‰∏ÄÊ≠•Êìç‰Ωú:");
    console.log("1. ËÆæÁΩÆ‰ª£Â∏ÅÂêàÁ∫¶: updateTokenContract(tokenAddress)");
    console.log("2. ÂêëÂêàÁ∫¶Â≠òÂÖ•‰ª£Â∏Å‰Ωú‰∏∫Â•ñÂä±Ê±†: depositTokens(amount)");
    console.log("3. ÈÉ®ÁΩ≤ÂâçÁ´ØÂ∫îÁî®");
    console.log("4. ÂºÄÂßãÊ∏∏Êàè!");
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
        process.exit(1);
    });
